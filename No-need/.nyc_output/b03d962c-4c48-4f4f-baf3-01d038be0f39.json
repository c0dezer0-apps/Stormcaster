{"/home/brian/Documents/c0de_box/projects/Stormcaster/stormcaster-client-refactor/src/components/counter/counterSlice.ts":{"path":"/home/brian/Documents/c0de_box/projects/Stormcaster/stormcaster-client-refactor/src/components/counter/counterSlice.ts","statementMap":{"0":{"start":{"line":3,"column":29},"end":{"line":3,"column":84}},"1":{"start":{"line":5,"column":0},"end":{"line":7,"column":3}},"2":{"start":{"line":8,"column":0},"end":{"line":8,"column":188}},"3":{"start":{"line":10,"column":19},"end":{"line":10,"column":80}},"4":{"start":{"line":12,"column":25},"end":{"line":12,"column":99}},"5":{"start":{"line":14,"column":15},"end":{"line":14,"column":42}},"6":{"start":{"line":16,"column":18},"end":{"line":16,"column":41}},"7":{"start":{"line":18,"column":19},"end":{"line":21,"column":1}},"8":{"start":{"line":27,"column":21},"end":{"line":52,"column":4}},"9":{"start":{"line":28,"column":13},"end":{"line":47,"column":5}},"10":{"start":{"line":30,"column":4},"end":{"line":46,"column":16}},"11":{"start":{"line":31,"column":6},"end":{"line":45,"column":7}},"12":{"start":{"line":32,"column":8},"end":{"line":44,"column":9}},"13":{"start":{"line":34,"column":12},"end":{"line":34,"column":30}},"14":{"start":{"line":35,"column":12},"end":{"line":35,"column":55}},"15":{"start":{"line":38,"column":12},"end":{"line":38,"column":37}},"16":{"start":{"line":39,"column":12},"end":{"line":39,"column":60}},"17":{"start":{"line":43,"column":12},"end":{"line":43,"column":35}},"18":{"start":{"line":49,"column":2},"end":{"line":51,"column":4}},"19":{"start":{"line":50,"column":4},"end":{"line":50,"column":39}},"20":{"start":{"line":53,"column":0},"end":{"line":53,"column":40}},"21":{"start":{"line":54,"column":19},"end":{"line":84,"column":2}},"22":{"start":{"line":64,"column":6},"end":{"line":64,"column":23}},"23":{"start":{"line":67,"column":6},"end":{"line":67,"column":23}},"24":{"start":{"line":71,"column":6},"end":{"line":71,"column":36}},"25":{"start":{"line":77,"column":4},"end":{"line":82,"column":7}},"26":{"start":{"line":78,"column":6},"end":{"line":78,"column":31}},"27":{"start":{"line":80,"column":6},"end":{"line":80,"column":28}},"28":{"start":{"line":81,"column":6},"end":{"line":81,"column":36}},"29":{"start":{"line":85,"column":0},"end":{"line":85,"column":36}},"30":{"start":{"line":86,"column":28},"end":{"line":86,"column":48}},"31":{"start":{"line":87,"column":16},"end":{"line":87,"column":47}},"32":{"start":{"line":88,"column":16},"end":{"line":88,"column":47}},"33":{"start":{"line":89,"column":24},"end":{"line":89,"column":63}},"34":{"start":{"line":93,"column":0},"end":{"line":93,"column":46}},"35":{"start":{"line":94,"column":0},"end":{"line":94,"column":30}},"36":{"start":{"line":95,"column":0},"end":{"line":95,"column":30}},"37":{"start":{"line":97,"column":18},"end":{"line":99,"column":1}},"38":{"start":{"line":98,"column":2},"end":{"line":98,"column":29}},"39":{"start":{"line":103,"column":0},"end":{"line":103,"column":34}},"40":{"start":{"line":105,"column":21},"end":{"line":113,"column":1}},"41":{"start":{"line":106,"column":2},"end":{"line":112,"column":4}},"42":{"start":{"line":107,"column":23},"end":{"line":107,"column":46}},"43":{"start":{"line":109,"column":4},"end":{"line":111,"column":5}},"44":{"start":{"line":110,"column":6},"end":{"line":110,"column":42}},"45":{"start":{"line":115,"column":0},"end":{"line":115,"column":40}},"46":{"start":{"line":116,"column":15},"end":{"line":116,"column":35}},"47":{"start":{"line":117,"column":0},"end":{"line":117,"column":27}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":27,"column":87},"end":{"line":27,"column":88}},"loc":{"start":{"line":27,"column":99},"end":{"line":52,"column":1}},"line":27},"1":{"name":"_callee","decl":{"start":{"line":28,"column":94},"end":{"line":28,"column":101}},"loc":{"start":{"line":28,"column":110},"end":{"line":47,"column":3}},"line":28},"2":{"name":"_callee$","decl":{"start":{"line":30,"column":46},"end":{"line":30,"column":54}},"loc":{"start":{"line":30,"column":65},"end":{"line":46,"column":5}},"line":30},"3":{"name":"(anonymous_3)","decl":{"start":{"line":49,"column":9},"end":{"line":49,"column":10}},"loc":{"start":{"line":49,"column":23},"end":{"line":51,"column":3}},"line":49},"4":{"name":"increment","decl":{"start":{"line":59,"column":24},"end":{"line":59,"column":33}},"loc":{"start":{"line":59,"column":41},"end":{"line":65,"column":5}},"line":59},"5":{"name":"decrement","decl":{"start":{"line":66,"column":24},"end":{"line":66,"column":33}},"loc":{"start":{"line":66,"column":41},"end":{"line":68,"column":5}},"line":66},"6":{"name":"incrementByAmount","decl":{"start":{"line":70,"column":32},"end":{"line":70,"column":49}},"loc":{"start":{"line":70,"column":65},"end":{"line":72,"column":5}},"line":70},"7":{"name":"extraReducers","decl":{"start":{"line":76,"column":26},"end":{"line":76,"column":39}},"loc":{"start":{"line":76,"column":49},"end":{"line":83,"column":3}},"line":76},"8":{"name":"(anonymous_8)","decl":{"start":{"line":77,"column":44},"end":{"line":77,"column":45}},"loc":{"start":{"line":77,"column":61},"end":{"line":79,"column":5}},"line":77},"9":{"name":"(anonymous_9)","decl":{"start":{"line":79,"column":41},"end":{"line":79,"column":42}},"loc":{"start":{"line":79,"column":66},"end":{"line":82,"column":5}},"line":79},"10":{"name":"selectCount","decl":{"start":{"line":97,"column":27},"end":{"line":97,"column":38}},"loc":{"start":{"line":97,"column":46},"end":{"line":99,"column":1}},"line":97},"11":{"name":"incrementIfOdd","decl":{"start":{"line":105,"column":30},"end":{"line":105,"column":44}},"loc":{"start":{"line":105,"column":53},"end":{"line":113,"column":1}},"line":105},"12":{"name":"(anonymous_12)","decl":{"start":{"line":106,"column":9},"end":{"line":106,"column":10}},"loc":{"start":{"line":106,"column":39},"end":{"line":112,"column":3}},"line":106}},"branchMap":{"0":{"loc":{"start":{"line":32,"column":8},"end":{"line":44,"column":9}},"type":"switch","locations":[{"start":{"line":33,"column":10},"end":{"line":35,"column":55}},{"start":{"line":37,"column":10},"end":{"line":39,"column":60}},{"start":{"line":41,"column":10},"end":{"line":41,"column":17}},{"start":{"line":42,"column":10},"end":{"line":43,"column":35}}],"line":32},"1":{"loc":{"start":{"line":109,"column":4},"end":{"line":111,"column":5}},"type":"if","locations":[{"start":{"line":109,"column":4},"end":{"line":111,"column":5}},{"start":{"line":109,"column":4},"end":{"line":111,"column":5}}],"line":109}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":0,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":0,"27":0,"28":0,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":0,"39":1,"40":1,"41":0,"42":0,"43":0,"44":0,"45":1,"46":1,"47":1},"f":{"0":1,"1":0,"2":0,"3":0,"4":1,"5":1,"6":1,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0},"b":{"0":[0,0,0,0],"1":[0,0]},"inputSourceMap":{"version":3,"sources":["counterSlice.ts"],"names":["initialState","value","status","incrementAsync","amount","response","data","counterSlice","name","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","selectCount","counter","incrementIfOdd","dispatch","getState","currentValue","reducer"],"mappings":";;;;;;;;;;;;;AAAA;;AAEA;;AAOA,IAAMA,YAA0B,GAAG;AACjCC,EAAAA,KAAK,EAAE,CAD0B;AAEjCC,EAAAA,MAAM,EAAE;AAFyB,CAAnC,C,CAKA;AACA;AACA;AACA;AACA;;AACO,IAAMC,cAAc,GAAG,+BAC5B,oBAD4B;AAAA,qFAE5B,iBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACyB,4BAAWA,MAAX,CADzB;;AAAA;AACQC,YAAAA,QADR;AAAA,6CAGSA,QAAQ,CAACC,IAHlB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAF4B;;AAAA;AAAA;AAAA;AAAA,IAAvB;;AASA,IAAMC,YAAY,GAAG,0BAAY;AACtCC,EAAAA,IAAI,EAAE,SADgC;AAEtCR,EAAAA,YAAY,EAAZA,YAFsC;AAGtC;AACAS,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAE,mBAACC,KAAD,EAAW;AACpB;AACA;AACA;AACA;AACAA,MAAAA,KAAK,CAACV,KAAN,IAAe,CAAf;AACD,KAPO;AAQRW,IAAAA,SAAS,EAAE,mBAACD,KAAD,EAAW;AACpBA,MAAAA,KAAK,CAACV,KAAN,IAAe,CAAf;AACD,KAVO;AAWR;AACAY,IAAAA,iBAAiB,EAAE,2BAACF,KAAD,EAAQG,MAAR,EAA0C;AAC3DH,MAAAA,KAAK,CAACV,KAAN,IAAea,MAAM,CAACC,OAAtB;AACD;AAdO,GAJ4B;AAoBtC;AACA;AACAC,EAAAA,aAAa,EAAE,uBAACC,OAAD,EAAa;AAC1BA,IAAAA,OAAO,CACJC,OADH,CACWf,cAAc,CAACgB,OAD1B,EACmC,UAACR,KAAD,EAAW;AAC1CA,MAAAA,KAAK,CAACT,MAAN,GAAe,SAAf;AACD,KAHH,EAIGgB,OAJH,CAIWf,cAAc,CAACiB,SAJ1B,EAIqC,UAACT,KAAD,EAAQG,MAAR,EAAmB;AACpDH,MAAAA,KAAK,CAACT,MAAN,GAAe,MAAf;AACAS,MAAAA,KAAK,CAACV,KAAN,IAAea,MAAM,CAACC,OAAtB;AACD,KAPH;AAQD;AA/BqC,CAAZ,CAArB;;AAkCA,4BAAoDR,YAAY,CAACc,OAAjE;AAAA,IAAQX,SAAR,yBAAQA,SAAR;AAAA,IAAmBE,SAAnB,yBAAmBA,SAAnB;AAAA,IAA8BC,iBAA9B,yBAA8BA,iBAA9B,C,CAEP;AACA;AACA;;;;;;AACO,IAAMS,WAAW,GAAG,SAAdA,WAAc,CAACX,KAAD;AAAA,SAAsBA,KAAK,CAACY,OAAN,CAActB,KAApC;AAAA,CAApB,C,CAEP;AACA;;;;;AACO,IAAMuB,cAAc,GAAG,SAAjBA,cAAiB,CAACpB,MAAD;AAAA,SAA8B,UAC1DqB,QAD0D,EAE1DC,QAF0D,EAGvD;AACH,QAAMC,YAAY,GAAGL,WAAW,CAACI,QAAQ,EAAT,CAAhC;;AACA,QAAIC,YAAY,GAAG,CAAf,KAAqB,CAAzB,EAA4B;AAC1BF,MAAAA,QAAQ,CAACZ,iBAAiB,CAACT,MAAD,CAAlB,CAAR;AACD;AACF,GAR6B;AAAA,CAAvB;;;eAUQG,YAAY,CAACqB,O","sourceRoot":"/home/brian/Documents/c0de_box/projects/Stormcaster/stormcaster-client-refactor/src/components/counter/","sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\nimport { fetchCount } from './counterAPI';\n\nexport interface CounterState {\n  value: number;\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount: number) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount: number): AppThunk => (\n  dispatch,\n  getState\n) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"24e3fa0096c49cb94cba5610fb9bc6cd0ddcd10f","contentHash":"7079fc0818d6fc213df721fd71b0eadce0ac802329e446bab369792fd909fd1e"},"/home/brian/Documents/c0de_box/projects/Stormcaster/stormcaster-client-refactor/src/components/counter/counterAPI.ts":{"path":"/home/brian/Documents/c0de_box/projects/Stormcaster/stormcaster-client-refactor/src/components/counter/counterAPI.ts","statementMap":{"0":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"1":{"start":{"line":6,"column":0},"end":{"line":6,"column":32}},"2":{"start":{"line":10,"column":15},"end":{"line":10,"column":84}},"3":{"start":{"line":11,"column":2},"end":{"line":17,"column":5}},"4":{"start":{"line":12,"column":4},"end":{"line":16,"column":12}},"5":{"start":{"line":13,"column":6},"end":{"line":15,"column":9}}},"fnMap":{"0":{"name":"fetchCount","decl":{"start":{"line":9,"column":9},"end":{"line":9,"column":19}},"loc":{"start":{"line":9,"column":22},"end":{"line":18,"column":1}},"line":9},"1":{"name":"(anonymous_1)","decl":{"start":{"line":11,"column":21},"end":{"line":11,"column":22}},"loc":{"start":{"line":11,"column":40},"end":{"line":17,"column":3}},"line":11},"2":{"name":"(anonymous_2)","decl":{"start":{"line":12,"column":22},"end":{"line":12,"column":23}},"loc":{"start":{"line":12,"column":34},"end":{"line":16,"column":5}},"line":12}},"branchMap":{"0":{"loc":{"start":{"line":10,"column":15},"end":{"line":10,"column":84}},"type":"cond-expr","locations":[{"start":{"line":10,"column":68},"end":{"line":10,"column":80}},{"start":{"line":10,"column":83},"end":{"line":10,"column":84}}],"line":10},"1":{"loc":{"start":{"line":10,"column":15},"end":{"line":10,"column":65}},"type":"binary-expr","locations":[{"start":{"line":10,"column":15},"end":{"line":10,"column":35}},{"start":{"line":10,"column":39},"end":{"line":10,"column":65}}],"line":10}},"s":{"0":1,"1":1,"2":0,"3":0,"4":0,"5":0},"f":{"0":0,"1":0,"2":0},"b":{"0":[0,0],"1":[0,0]},"inputSourceMap":{"version":3,"sources":["counterAPI.ts"],"names":["fetchCount","amount","Promise","resolve","setTimeout","data"],"mappings":";;;;;;;AAAA;AACO,SAASA,UAAT,GAAgC;AAAA,MAAZC,MAAY,uEAAH,CAAG;AACrC,SAAO,IAAIC,OAAJ,CAA8B,UAACC,OAAD;AAAA,WACnCC,UAAU,CAAC;AAAA,aAAMD,OAAO,CAAC;AAAEE,QAAAA,IAAI,EAAEJ;AAAR,OAAD,CAAb;AAAA,KAAD,EAAkC,GAAlC,CADyB;AAAA,GAA9B,CAAP;AAGD","sourceRoot":"/home/brian/Documents/c0de_box/projects/Stormcaster/stormcaster-client-refactor/src/components/counter/","sourcesContent":["// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise<{ data: number }>((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"11d9de7daa02b1d4e74042d12c745f8144c0b60e","contentHash":"f7050f8e7fe1d8d19844f9bf39d0b3dd8c5433dff01e591af2539155d66ed7a3"}}